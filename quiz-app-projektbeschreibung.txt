✅ Quiz-App – Projektübersicht

🎯 Ziel

Erstelle eine vollständige Quiz-Anwendung, bestehend aus:

    Frontend: HTML, CSS, JavaScript
    Backend: Node.js + Express
    Datenbank: MongoDB

🔧 Anforderungen & Technik
Bereich       Technologie          Zweck
Frontend      HTML, CSS, JS        Benutzeroberfläche & Interaktion
Backend       Node.js + Express    API-Routen, Datenlogik
Datenbank     MongoDB (+ Mongoose) Speichern & Abrufen der Fragen
API-Zugriff   fetch()              Daten holen & senden
Deployment    z. B. Render + MongoDB Atlas Hosting & öffentliche Erreichbarkeit

🧱 Projektstruktur (empfohlen)

quiz-app/
├── backend/
│   ├── server.js              # Einstiegspunkt für Express-Server
│   ├── models/
│   │   └── Question.js        # Mongoose-Modell für Quizfragen
│   ├── routes/
│   │   └── quiz.js            # API-Routen (GET, POST ...)
│   └── .env                   # MongoDB-Verbindungsdaten
├── frontend/
│   ├── index.html             # UI
│   ├── style.css              # Layout & Design
│   └── script.js              # fetch, Quiz-Logik
├── package.json               # Projektconfig
└── README.md

📌 Funktionen (MVP – Minimum Viable Product)
🧠 Frontend:
    - Quiz-Start mit „Start“-Button
    - Anzeige: 1 Frage + 4 Antworten
    - Auswahl einer Antwort → Feedback (richtig/falsch)
    - Punktestand + „Weiter zur nächsten Frage“
    - Quiz-Ende: Punktestand anzeigen
    - (Optional) Neue Fragen eingeben

🌐 Backend:
    - GET /questions → Alle Quizfragen aus DB holen
    - POST /questions → Neue Frage hinzufügen
    - MongoDB-Verbindung mit Mongoose
    - Datenmodell für Quizfragen

📦 Beispiel-Datenmodell (Mongoose)
{
  question: "Was ist die Hauptstadt von Frankreich?",
  options: ["Berlin", "Madrid", "Paris", "Rom"],
  answer: "Paris"
}

🛠️ Benötigte Pakete (im Backend)
npm install express mongoose cors dotenv

🔗 Datenfluss
Frontend (fetch)
   ⇅ JSON
Backend (Express API)
   ⇅ via Mongoose
MongoDB (Fragen speichern)

✅ Projektziele im Überblick
- Express-Server aufsetzen
- MongoDB verbinden (lokal oder Atlas)
- Frage-Modell + API-Routen
- HTML/CSS-Quiz-UI aufbauen
- Fragen per fetch() anzeigen
- Quiz-Logik mit Punkten
- Fragen hinzufügen (optional)
- Deployment (optional)
